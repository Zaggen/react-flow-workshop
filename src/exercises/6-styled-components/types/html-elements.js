type HTMLElementProps = {
  getInnerRef?: (el: ?HTMLElement) => void,
  className: string,
  dir?: 'ltr' | 'rtl' | 'auto',
  id?: string,
  innerHTML?: string,
  isContentEditable?: boolean,
  itemValue?: Object,
  lang?: string,
  onabort?: ?Function,
  onblur?: ?Function,
  oncancel?: ?Function,
  oncanplay?: ?Function,
  oncanplaythrough?: ?Function,
  onchange?: ?Function,
  onclick?: ?Function,
  oncuechange?: ?Function,
  ondblclick?: ?Function,
  ondurationchange?: ?Function,
  onemptied?: ?Function,
  onended?: ?Function,
  onerror?: ?Function,
  onfocus?: ?Function,
  oninput?: ?Function,
  oninvalid?: ?Function,
  onkeydown?: ?Function,
  onkeypress?: ?Function,
  onkeyup?: ?Function,
  onload?: ?Function,
  onloadeddata?: ?Function,
  onloadedmetadata?: ?Function,
  onloadstart?: ?Function,
  onmousedown?: ?Function,
  onmouseenter?: ?Function,
  onmouseleave?: ?Function,
  onmousemove?: ?Function,
  onmouseout?: ?Function,
  onmouseover?: ?Function,
  onmouseup?: ?Function,
  onmousewheel?: ?Function,
  onpause?: ?Function,
  onplay?: ?Function,
  onplaying?: ?Function,
  onprogress?: ?Function,
  onratechange?: ?Function,
  onreadystatechange?: ?Function,
  onreset?: ?Function,
  onresize?: ?Function,
  onscroll?: ?Function,
  onseeked?: ?Function,
  onseeking?: ?Function,
  onselect?: ?Function,
  onshow?: ?Function,
  onstalled?: ?Function,
  onsubmit?: ?Function,
  onsuspend?: ?Function,
  ontimeupdate?: ?Function,
  ontoggle?: ?Function,
  onvolumechange?: ?Function,
  onwaiting?: ?Function,
  properties?: any,
  spellcheck?: boolean,
  style?: Object,
  tabIndex?: number,
  title?: string,
}

type HTMLTableElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLTableElement) => void,
}

type HTMLTableCaptionElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLTableCaptionElement) => void,
}

type HTMLTableSectionElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLTableSectionElement) => void,
}

type HTMLTableCellElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLTableCellElement) => void,
}

type HTMLTableRowElementProps = {
  ...$Exact<HTMLElementProps>,
  align?: 'left' | 'right' | 'center',
  getInnerRef?: (el: ?HTMLTableRowElement) => void,
}

type HTMLMenuElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLMenuElement) => void,
}

type HTMLBaseElementProps = {
  ...$Exact<HTMLElementProps>,
  href?: string,
  target?: string,
  getInnerRef?: (el: ?HTMLBaseElement) => void,
}

type HTMLTemplateElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLTemplateElement) => void,
}

type HTMLCanvasElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLCanvasElement) => void,
}

type HTMLDetailsElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLDetailsElement) => void,
}

type HTMLFormElementProps = {
  ...$Exact<HTMLFormElementProps>,
  onSubmit?: (ev: any) => void,
  getInnerRef?: (el: ?HTMLFormElement) => void,
}

type HTMLFieldSetElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLFieldSetElement) => void,
}

type HTMLLegendElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLTableCaptionElement) => void,
}

type HTMLIFrameElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLIFrameElement) => void,
}

type HTMLImageElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLImageElement) => void,
}

type Image = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?Image) => void,
}

type HTMLMediaElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLMediaElement) => void,
}

type HTMLAudioElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLAudioElement) => void,
}

type HTMLVideoElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLVideoElement) => void,
}

type HTMLSourceElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLSourceElement) => void,
}

type HTMLInputElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLInputElement) => void,
  accept?: string,
  align?: string,
  alt?: string,
  autocomplete?: string,
  autofocus?: boolean,
  border?: string,
  checked?: boolean,
  complete?: boolean,
  defaultChecked?: boolean,
  defaultValue?: string,
  dirname?: string,
  disabled?: boolean,
  dynsrc?: string,
  files?: FileList,
  form?: HTMLFormElementProps,
  formAction?: string,
  formEncType?: string,
  formMethod?: string,
  formNoValidate?: boolean,
  formTarget?: string,
  height?: string,
  hspace?: number,
  indeterminate?: boolean,
  labels?: NodeList<HTMLLabelElement>,
  list?: HTMLElementProps,
  loop?: number,
  lowsrc?: string,
  max?: string,
  maxLength?: number,
  min?: string,
  multiple?: boolean,
  name?: string,
  pattern?: string,
  placeholder?: string,
  readOnly?: boolean,
  required?: boolean,
  selectionDirection?: SelectionDirection,
  selectionEnd?: number,
  selectionStart?: number,
  size?: number,
  src?: string,
  start?: string,
  status?: boolean,
  step?: string,
  tabIndex?: number,
  type?: string,
  useMap?: string,
  validationMessage?: string,
  validity?: ValidityState,
  value?: string,
  valueAsDate?: Date,
  valueAsNumber?: number,
  vrml?: string,
  vspace?: number,
  width?: string,
}

type HTMLButtonElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLButtonElement) => void,
  autofocus?: boolean,
  disabled?: boolean,
  form?: HTMLFormElementProps,
  labels?: NodeList<HTMLLabelElement> | null,
  name?: string,
  type?: string,
  validationMessage?: string,
  validity?: ValidityState,
  value?: string,
  willValidate?: boolean,
}

type HTMLTextAreaElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLTextAreaElement) => void,
  autofocus?: boolean,
  cols?: number,
  dirName?: string,
  disabled?: boolean,
  form?: HTMLFormElementProps,
  maxLength?: number,
  name?: string,
  placeholder?: string,
  readOnly?: boolean,
  required?: boolean,
  rows?: number,
  wrap?: string,

  type?: string,
  defaultValue?: string,
  value?: string,
  textLength?: number,

  willValidate?: boolean,
  validity?: ValidityState,
  validationMessage?: string,
  selectionStart?: number,
  selectionEnd?: number,
  selectionDirection?: SelectionDirection,
}

type HTMLSelectElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLSelectElement) => void,
  autocomplete?: string,
  autofocus?: boolean,
  disabled?: boolean,
  form?: HTMLFormElementProps,
  labels?: NodeList<HTMLLabelElement>,
  length?: number,
  multiple?: boolean,
  name?: string,
  options?: HTMLOptionsCollection,
  required?: boolean,
  selectedIndex?: number,
  selectedOptions?: HTMLCollection<HTMLOptionElement>,
  size?: number,
  type?: string,
  validationMessage?: string,
  validity?: ValidityState,
  value?: string,
  willValidate?: boolean,
}

type HTMLAnchorElementProps = {
  ...$Exact<HTMLElementProps>,
  getInnerRef?: (el: ?HTMLAnchorElement) => void,
  charset?: string,
  coords?: string,
  download?: string,
  hash?: string,
  host?: string,
  hostname?: string,
  href?: string,
  hreflang?: string,
  media?: string,
  name?: string,
  origin?: string,
  password?: string,
  pathname?: string,
  port?: string,
  protocol?: string,
  rel?: string,
  rev?: string,
  search?: string,
  shape?: string,
  target?: string,
  text?: string,
  type?: string,
  username?: string,
}

export type HTMLElements = {
  a: HTMLAnchorElementProps,
  abbr: HTMLElementProps,
  address: HTMLElementProps,
  area: HTMLElementProps,
  article: HTMLElementProps,
  aside: HTMLElementProps,
  audio: HTMLElementProps,
  b: HTMLElementProps,
  base: HTMLElementProps,
  bdi: HTMLElementProps,
  bdo: HTMLElementProps,
  big: HTMLElementProps,
  blockquote: HTMLElementProps,
  body: HTMLElementProps,
  br: HTMLElementProps,
  button: HTMLElementProps,
  canvas: HTMLElementProps,
  caption: HTMLElementProps,
  cite: HTMLElementProps,
  code: HTMLElementProps,
  col: HTMLElementProps,
  colgroup: HTMLElementProps,
  data: HTMLElementProps,
  datalist: HTMLElementProps,
  dd: HTMLElementProps,
  del: HTMLElementProps,
  details: HTMLElementProps,
  dfn: HTMLElementProps,
  dialog: HTMLElementProps,
  div: HTMLElementProps,
  dl: HTMLElementProps,
  dt: HTMLElementProps,
  em: HTMLElementProps,
  embed: HTMLElementProps,
  fieldset: HTMLElementProps,
  figcaption: HTMLElementProps,
  figure: HTMLElementProps,
  footer: HTMLElementProps,
  form: HTMLElementProps,
  h1: HTMLElementProps,
  h2: HTMLElementProps,
  h3: HTMLElementProps,
  h4: HTMLElementProps,
  h5: HTMLElementProps,
  h6: HTMLElementProps,
  head: HTMLElementProps,
  header: HTMLElementProps,
  hgroup: HTMLElementProps,
  hr: HTMLElementProps,
  html: HTMLElementProps,
  i: HTMLElementProps,
  iframe: HTMLElementProps,
  img: HTMLElementProps,
  input: HTMLElementProps,
  ins: HTMLElementProps,
  kbd: HTMLElementProps,
  keygen: HTMLElementProps,
  label: HTMLElementProps,
  legend: HTMLElementProps,
  li: HTMLElementProps,
  link: HTMLElementProps,
  main: HTMLElementProps,
  map: HTMLElementProps,
  mark: HTMLElementProps,
  menu: HTMLElementProps,
  menuitem: HTMLElementProps,
  meta: HTMLElementProps,
  meter: HTMLElementProps,
  nav: HTMLElementProps,
  noscript: HTMLElementProps,
  object: HTMLElementProps,
  ol: HTMLElementProps,
  optgroup: HTMLElementProps,
  option: HTMLElementProps,
  output: HTMLElementProps,
  p: HTMLElementProps,
  param: HTMLElementProps,
  picture: HTMLElementProps,
  pre: HTMLElementProps,
  progress: HTMLElementProps,
  q: HTMLElementProps,
  rp: HTMLElementProps,
  rt: HTMLElementProps,
  ruby: HTMLElementProps,
  s: HTMLElementProps,
  samp: HTMLElementProps,
  script: HTMLElementProps,
  section: HTMLElementProps,
  select: HTMLElementProps,
  small: HTMLElementProps,
  source: HTMLElementProps,
  span: HTMLElementProps,
  strong: HTMLElementProps,
  style: HTMLElementProps,
  sub: HTMLElementProps,
  summary: HTMLElementProps,
  sup: HTMLElementProps,
  table: HTMLElementProps,
  tbody: HTMLElementProps,
  td: HTMLElementProps,
  textarea: HTMLElementProps,
  tfoot: HTMLElementProps,
  th: HTMLElementProps,
  thead: HTMLElementProps,
  time: HTMLElementProps,
  title: HTMLElementProps,
  tr: HTMLElementProps,
  track: HTMLElementProps,
  u: HTMLElementProps,
  ul: HTMLElementProps,
  var: HTMLElementProps,
  video: HTMLElementProps,
  wbr: HTMLElementProps,

  // SVG
  circle: HTMLElementProps,
  clipPath: HTMLElementProps,
  defs: HTMLElementProps,
  ellipse: HTMLElementProps,
  g: HTMLElementProps,
  image: HTMLElementProps,
  line: HTMLElementProps,
  linearGradient: HTMLElementProps,
  mask: HTMLElementProps,
  path: HTMLElementProps,
  pattern: HTMLElementProps,
  polygon: HTMLElementProps,
  polyline: HTMLElementProps,
  radialGradient: HTMLElementProps,
  rect: HTMLElementProps,
  stop: HTMLElementProps,
  svg: HTMLElementProps,
  text: HTMLElementProps,
  tspan: HTMLElementProps,
}
